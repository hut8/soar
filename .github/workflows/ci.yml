name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test-sveltekit:
    name: Test SvelteKit Project
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run type check
        run: npm run check

      - name: Run tests
        run: npm test

      - name: Build SvelteKit project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: web/build/
          retention-days: 1

  test-rust:
    name: Test Rust Project
    runs-on: ubuntu-latest
    needs: test-sveltekit
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: soar_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download web build artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: web/build/

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Setup test database
        env:
          PGPASSWORD: postgres
        run: |
          # Create PostGIS extension
          psql -h localhost -U postgres -d soar_test -c "CREATE EXTENSION IF NOT EXISTS postgis;"

      - name: Check Rust formatting
        run: cargo fmt --check

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run Rust tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/soar_test
        run: cargo test --verbose

      - name: Check that migrations work
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/soar_test
        run: |
          # Run migrations using sqlx-cli if available, otherwise try with the binary
          if command -v sqlx &> /dev/null; then
            sqlx migrate run
          else
            echo "sqlx-cli not available, migrations will be tested during build"
          fi

  build-release:
    name: Build Release Binary
    runs-on: ubuntu-latest
    needs: [test-sveltekit, test-rust]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download web build artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: web/build/

      - name: Setup Node.js (for npm build during Rust build)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install web dependencies
        run: |
          cd web
          npm ci

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Build release binary
        run: cargo build --release --verbose

      - name: Create binary archive
        run: |
          mkdir -p release
          cp target/release/soar release/
          cp README.md release/ || echo "No README.md found"
          tar -czf soar-linux-x64.tar.gz -C release .

      - name: Upload release binary
        uses: actions/upload-artifact@v4
        with:
          name: soar-linux-x64
          path: soar-linux-x64.tar.gz
          retention-days: 30

      - name: Show binary info
        run: |
          echo "Binary size:"
          ls -lh target/release/soar
          echo ""
          echo "Binary info:"
          file target/release/soar
          echo ""
          echo "Help output:"
          ./target/release/soar --help || true

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

      - name: Check for outdated dependencies
        run: |
          cargo install cargo-outdated
          cargo outdated --exit-code 1 || echo "Some dependencies are outdated (non-critical)"