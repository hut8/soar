name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test-sveltekit:
    name: Test SvelteKit Project
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install chromium --with-deps

      - name: Run linter
        run: npm run lint

      - name: Run type check
        run: npm run check

      - name: Run tests
        run: npm test

      - name: Build SvelteKit project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: web/build/
          retention-days: 1

  test-rust:
    name: Test Rust Project
    runs-on: ubuntu-22.04

    services:
      postgres:
        image: postgis/postgis:15-3.4
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: soar_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install web dependencies
        working-directory: ./web
        run: npm ci

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Install PostgreSQL client and GDAL development libraries
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client libgdal-dev

      - name: Setup test database
        env:
          PGPASSWORD: postgres
        run: |
          # Create PostGIS extension (already available in postgis/postgis image)
          psql -h localhost -U postgres -d soar_test -c "CREATE EXTENSION IF NOT EXISTS postgis;"

      - name: Check Rust formatting
        run: cargo fmt --check

      - name: Cache Diesel CLI
        id: cache-diesel
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/diesel
          key: ${{ runner.os }}-diesel-cli-2.2.0

      - name: Install Diesel CLI
        if: steps.cache-diesel.outputs.cache-hit != 'true'
        run: cargo install diesel_cli --no-default-features --features postgres --version 2.2.0

      - name: Run migrations
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/soar_test
        run: diesel migration run

      - name: Cache cargo-nextest
        id: cache-nextest
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-nextest
          key: ${{ runner.os }}-cargo-nextest-0.9.68

      - name: Install cargo-nextest
        if: steps.cache-nextest.outputs.cache-hit != 'true'
        run: cargo install cargo-nextest --version 0.9.68 --locked

      - name: Run Clippy
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/soar_test
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run Rust tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/soar_test
        run: cargo nextest run

  build-release:
    name: Build Release Binary
    runs-on: ubuntu-22.04
    needs: test-sveltekit

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download web build artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: web/build/

      - name: Setup Node.js (for npm build during Rust build)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install web dependencies
        working-directory: ./web
        run: npm ci

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Install GDAL and mold linker
        run: |
          sudo apt-get update
          sudo apt-get install -y libgdal-dev mold

      - name: Build release binary
        env:
          RUSTFLAGS: "-C link-arg=-fuse-ld=mold"
        run: cargo build --release

      - name: Create binary archive
        run: |
          mkdir -p release
          cp target/release/soar release/
          cp README.md release/ || echo "No README.md found"
          tar -czf soar-linux-x64.tar.gz -C release .

      - name: Upload release binary
        uses: actions/upload-artifact@v4
        with:
          name: soar-linux-x64
          path: soar-linux-x64.tar.gz
          retention-days: 30

      - name: Show binary info
        run: |
          echo "Binary size:"
          ls -lh target/release/soar
          echo ""
          echo "Binary info:"
          file target/release/soar
          echo ""
          echo "Help output:"
          ./target/release/soar --help || true

  security-audit:
    name: Security Audit
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Install GDAL development libraries
        run: |
          sudo apt-get update
          sudo apt-get install -y libgdal-dev

      - name: Cache cargo-audit
        id: cache-cargo-audit
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-audit
          key: ${{ runner.os }}-cargo-audit-0.20.0

      - name: Install cargo-audit
        if: steps.cache-cargo-audit.outputs.cache-hit != 'true'
        run: cargo install cargo-audit --version 0.20.0 --locked

      - name: Run security audit
        run: cargo audit

      - name: Cache cargo-outdated
        id: cache-cargo-outdated
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-outdated
          key: ${{ runner.os }}-cargo-outdated-0.15.0

      - name: Install cargo-outdated
        if: steps.cache-cargo-outdated.outputs.cache-hit != 'true'
        run: cargo install cargo-outdated --version 0.15.0 --locked

      - name: Check for outdated dependencies
        run: cargo outdated --exit-code 1 || echo "Some dependencies are outdated (non-critical)"

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: [test-sveltekit, test-rust, build-release, security-audit]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release binary
        uses: actions/download-artifact@v4
        with:
          name: soar-linux-x64
          path: ./

      - name: Extract binary
        run: |
          tar -xzf soar-linux-x64.tar.gz
          chmod +x soar

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DEPLOY_SERVER }} >> ~/.ssh/known_hosts

      - name: Prepare deployment package
        run: |
          # Create timestamped deployment directory name
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "DEPLOY_TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

          # Create local deployment directory
          mkdir -p deploy-pkg
          cp soar deploy-pkg/
          cp soar-deploy deploy-pkg/
          cp *.service deploy-pkg/ || echo "No service files found in root"
          cp *.timer deploy-pkg/ || echo "No timer files found in root"

          echo "Deployment package prepared for timestamp: $TIMESTAMP"
          ls -lh deploy-pkg/

      - name: Upload deployment package
        run: |
          DEPLOY_DIR="/tmp/soar/deploy/${{ env.DEPLOY_TIMESTAMP }}"

          echo "Creating deployment directory on server: $DEPLOY_DIR"
          ssh soar@${{ secrets.DEPLOY_SERVER }} "mkdir -p $DEPLOY_DIR"

          echo "Uploading deployment package..."
          scp -r deploy-pkg/* soar@${{ secrets.DEPLOY_SERVER }}:$DEPLOY_DIR/

          echo "Deployment package uploaded successfully"

      - name: Execute deployment
        run: |
          DEPLOY_DIR="/tmp/soar/deploy/${{ env.DEPLOY_TIMESTAMP }}"

          echo "Updating server-side deployment script..."
          ssh soar@${{ secrets.DEPLOY_SERVER }} "sudo cp $DEPLOY_DIR/soar-deploy /usr/local/bin/soar-deploy && sudo chmod +x /usr/local/bin/soar-deploy"

          echo "Executing deployment script..."
          ssh soar@${{ secrets.DEPLOY_SERVER }} "sudo /usr/local/bin/soar-deploy $DEPLOY_DIR"

      - name: Cleanup SSH
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa
