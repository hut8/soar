name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body: |
            SOAR Release ${{ steps.get_version.outputs.version }}

            ## Changes
            See the [commit history](https://github.com/${{ github.repository }}/compare/${{ steps.get_version.outputs.version }}...HEAD) for detailed changes.

            ## Installation
            Download the appropriate binary for your platform from the assets below.

            ## Usage
            ```bash
            # Extract the binary
            tar -xzf soar-*.tar.gz

            # Make it executable
            chmod +x soar

            # Run with help to see available commands
            ./soar --help
            ```
          draft: false
          prerelease: false

  build-release-matrix:
    name: Build Release (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: create-release

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: soar-linux-x64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: soar-linux-x64-musl
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: soar-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: soar-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: soar-windows-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install web dependencies
        run: |
          cd web
          npm ci

      - name: Build web project
        run: |
          cd web
          npm run build

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}

      - name: Install musl tools (Linux musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }} --verbose

      - name: Create release archive (Unix)
        if: runner.os != 'Windows'
        run: |
          rm -rf release
          mkdir -p release
          cp target/${{ matrix.target }}/release/soar release/
          cp README.md release/ || echo "No README.md found"
          tar -czf ${{ matrix.artifact_name }}.tar.gz -C release .

      - name: Create release archive (Windows)
        if: runner.os == 'Windows'
        run: |
          if exist release rmdir /s /q release
          mkdir release
          copy target\${{ matrix.target }}\release\soar.exe release\
          copy README.md release\ || echo "No README.md found"
          powershell Compress-Archive -Path release\* -DestinationPath ${{ matrix.artifact_name }}.zip

      - name: Upload release asset (Unix)
        if: runner.os != 'Windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.artifact_name }}.tar.gz
          asset_name: ${{ matrix.artifact_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload release asset (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.artifact_name }}.zip
          asset_name: ${{ matrix.artifact_name }}.zip
          asset_content_type: application/zip

  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/soar:latest
            ghcr.io/${{ github.repository_owner }}/soar:${{ steps.get_version.outputs.version }}
          secrets: |
            sentry_token=${{ secrets.SENTRY_AUTH_TOKEN }}
          build-args: |
            SENTRY_ORG=${{ secrets.SENTRY_ORG }}
            SENTRY_PROJECT=${{ secrets.SENTRY_PROJECT }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
