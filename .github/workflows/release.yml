name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body: |
            SOAR Release ${{ steps.get_version.outputs.version }}

            ## Changes
            See the [commit history](https://github.com/${{ github.repository }}/compare/${{ steps.get_version.outputs.version }}...HEAD) for detailed changes.

            ## Installation
            Download the appropriate binary for your platform from the assets below.

            ## Usage
            ```bash
            # Extract the binary
            tar -xzf soar-*.tar.gz

            # Make it executable
            chmod +x soar

            # Run with help to see available commands
            ./soar --help
            ```
          draft: false
          prerelease: false

  build-release:
    name: Build Release (Linux x64)
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install web dependencies
        run: |
          cd web
          npm ci

      - name: Build web project
        run: |
          cd web
          npm run build

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: x86_64-unknown-linux-gnu

      - name: Build release binary
        run: cargo build --release --target x86_64-unknown-linux-gnu --verbose

      - name: Install sentry-cli
        run: |
          curl -sL https://sentry.io/get-cli/ | bash

      - name: Upload debug symbols to Sentry
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        run: |
          sentry-cli debug-files upload \
            --org "$SENTRY_ORG" \
            --project "$SENTRY_PROJECT" \
            target/x86_64-unknown-linux-gnu/release/

      - name: Create Sentry release
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        run: |
          export VERSION="${GITHUB_REF#refs/tags/}"
          sentry-cli releases new "$VERSION" \
            --org "$SENTRY_ORG" \
            --project "$SENTRY_PROJECT"
          sentry-cli releases set-commits "$VERSION" --auto \
            --org "$SENTRY_ORG" \
            --project "$SENTRY_PROJECT"
          sentry-cli releases finalize "$VERSION" \
            --org "$SENTRY_ORG" \
            --project "$SENTRY_PROJECT"

      - name: Create release archive
        run: |
          rm -rf release
          mkdir -p release
          cp target/x86_64-unknown-linux-gnu/release/soar release/
          cp README.md release/ || echo "No README.md found"
          tar -czf soar-linux-x64.tar.gz -C release .

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./soar-linux-x64.tar.gz
          asset_name: soar-linux-x64.tar.gz
          asset_content_type: application/gzip

  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/soar:latest
            ghcr.io/${{ github.repository_owner }}/soar:${{ steps.get_version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
