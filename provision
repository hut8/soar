#!/bin/bash
# SOAR Server Provisioning Script
#
# This script provisions a server for SOAR by installing systemd services,
# setting up deployment privileges, and configuring the environment.
#
# Usage:
#   sudo ./provision.sh

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if running as root
if [[ $EUID -ne 0 ]]; then
   echo -e "${RED}Error: This script must be run as root (use sudo)${NC}"
   exit 1
fi

echo -e "${GREEN}Provisioning SOAR server...${NC}"

# Create soar user if it doesn't exist
if ! id "soar" &>/dev/null; then
    echo -e "${BLUE}Creating 'soar' system user...${NC}"
    sudo useradd --system --user-group --create-home --home-dir /home/soar --shell /bin/bash soar
    echo -e "${GREEN}'soar' user created successfully${NC}"
else
    echo -e "${BLUE}'soar' user already exists${NC}"
fi

# Install sudoers configuration for deployment
echo -e "${BLUE}Installing deployment sudoers configuration...${NC}"
sudo cp infrastructure/sudoers.d/soar /etc/sudoers.d/
sudo chmod 440 /etc/sudoers.d/soar

# Validate sudoers syntax
echo "Validating sudoers configuration..."
if ! sudo visudo -c -f /etc/sudoers.d/soar; then
    echo -e "${RED}Error: Invalid sudoers syntax. Removing file.${NC}"
    sudo rm -f /etc/sudoers.d/soar
    exit 1
fi

# Copy service files
echo -e "${BLUE}Installing systemd service files...${NC}"
sudo cp soar.target /etc/systemd/system/
sudo cp soar-run.service /etc/systemd/system/
sudo cp soar-web.service /etc/systemd/system/
sudo cp soar-pull-data.service /etc/systemd/system/
sudo cp soar-pull-data.timer /etc/systemd/system/
sudo cp soar-sitemap.service /etc/systemd/system/
sudo cp soar-sitemap.timer /etc/systemd/system/
sudo cp infrastructure/nats-server.service /etc/systemd/system/
sudo cp infrastructure/elevation-service.service /etc/systemd/system/

# Reload systemd daemon
echo "Reloading systemd daemon..."
sudo systemctl daemon-reload

# Enable services
echo -e "${BLUE}Enabling services...${NC}"
sudo systemctl enable soar.target
sudo systemctl enable soar-run.service
sudo systemctl enable soar-web.service
sudo systemctl enable soar-pull-data.timer
sudo systemctl enable nats-server.service
sudo systemctl enable elevation-service.service

# Create necessary directories
echo -e "${BLUE}Creating directories...${NC}"
sudo mkdir -p /var/soar/logs
sudo mkdir -p /var/soar/archive
sudo mkdir -p /var/soar/elevation
sudo mkdir -p /etc/soar

# Set ownership for soar user
echo -e "${BLUE}Setting ownership for soar user...${NC}"
sudo chown -R soar:soar /var/soar
sudo chown -R soar:soar /var/soar/archive
sudo chown soar:soar /home/soar
sudo chmod 755 /home/soar

echo -e "${GREEN}Server provisioning complete!${NC}"
echo
echo -e "${YELLOW}Usage:${NC}"
echo "  sudo systemctl start soar       # Start all SOAR services"
echo "  sudo systemctl stop soar        # Stop all SOAR services"
echo "  sudo systemctl restart soar     # Restart all SOAR services"
echo "  sudo systemctl status soar      # Check status of all SOAR services"
echo
echo -e "${YELLOW}Individual service control:${NC}"
echo "  sudo systemctl start soar-web.service"
echo "  sudo systemctl stop soar-run.service"
echo "  sudo systemctl restart soar-pull-data.timer"
echo "  sudo systemctl start nats-server.service"
echo "  sudo systemctl start elevation-service.service"
echo
echo -e "${YELLOW}Check logs:${NC}"
echo "  sudo journalctl -u soar-run.service -f"
echo "  sudo journalctl -u soar-web.service -f"
echo "  sudo journalctl -u soar-pull-data.service -f"
echo "  sudo journalctl -u nats-server.service -f"
echo "  sudo journalctl -u elevation-service.service -f"
