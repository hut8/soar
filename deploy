#!/bin/bash

set -e

echo "üöÄ Starting SOAR deployment..."

# Configuration
RUN_SERVICE_NAME="soar-run"
WEB_SERVICE_NAME="soar-web"
BINARY_PATH="/usr/local/bin"
DEPLOY_PATH="/var/lib/soar"
ARCHIVE_PATH="/var/soar/archive"
SERVICE_USER="soar"
SERVICE_GROUP="soar"
BINARY_NAME="soar"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running as root or with sudo
if [[ $EUID -eq 0 ]]; then
    log_error "This script should not be run as root. Run with sudo when needed."
    exit 1
fi

# Create environment file from .env if it doesn't exist
if [ ! -f "/etc/soar/env" ]; then
    log_info "Creating environment file from .env..."

    if [ ! -f ".env" ]; then
        log_error ".env file not found in current directory"
        log_error "Please create .env file with your configuration first"
        exit 1
    fi

    # Create /etc/soar directory
    sudo mkdir -p /etc/soar

    # Create environment file from .env with production modifications
    {
        echo "# SOAR Environment Configuration - Auto-generated from .env"
        echo "# Generated on $(date)"
        echo ""

        # Process .env file, changing soar_dev to soar and BASE_URL to production port
        while IFS= read -r line || [ -n "$line" ]; do
            # Skip empty lines and comments
            if [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]]; then
                continue
            fi

            # Change database from soar_dev to soar
            if [[ "$line" =~ ^DATABASE_URL= ]]; then
                echo "$line" | sed 's/soar_dev/soar/g'
            # Change BASE_URL to production port
            elif [[ "$line" =~ ^BASE_URL= ]]; then
                echo "$line" | sed 's/:1338/:1337/g'
            # Add SOAR_ENV=production if not present
            else
                echo "$line"
            fi
        done < .env

        # Ensure SOAR_ENV is set to production
        if ! grep -q "^SOAR_ENV=" .env; then
            echo ""
            echo "# Environment setting"
            echo "SOAR_ENV=production"
        fi

        # Ensure RUST_LOG is set
        if ! grep -q "^RUST_LOG=" .env; then
            echo ""
            echo "# Logging level"
            echo "RUST_LOG=info"
        fi

    } | sudo tee /etc/soar/env > /dev/null

    log_info "Environment file created at /etc/soar/env"
else
    log_info "Environment file /etc/soar/env already exists"
fi

# Stop services if running
log_info "Stopping SOAR services if running..."
sudo systemctl stop ${RUN_SERVICE_NAME} 2>/dev/null || true
sudo systemctl stop ${WEB_SERVICE_NAME} 2>/dev/null || true

# Build the application
log_info "Building SOAR application..."
cargo build --release

# Check if build succeeded
if [ ! -f "target/release/${BINARY_NAME}" ]; then
    log_error "Build failed - binary not found at target/release/${BINARY_NAME}"
    exit 1
fi

# Create service user if it doesn't exist
if ! id "${SERVICE_USER}" &>/dev/null; then
    log_info "Creating ${SERVICE_USER} system user..."
    sudo useradd -r -s /bin/false -d ${DEPLOY_PATH} ${SERVICE_USER}
else
    log_info "User ${SERVICE_USER} already exists"
fi

# Create deployment and archive directories
log_info "Creating deployment and archive directories..."
sudo mkdir -p ${DEPLOY_PATH}/logs
sudo mkdir -p ${ARCHIVE_PATH}

# Ensure /etc/soar directory exists and has correct permissions
log_info "Ensuring /etc/soar directory has correct permissions..."
sudo mkdir -p /etc/soar
sudo chown root:${SERVICE_GROUP} /etc/soar
sudo chmod 750 /etc/soar

# Verify environment file permissions
log_info "Verifying environment file permissions..."
sudo chown root:${SERVICE_GROUP} /etc/soar/env
sudo chmod 640 /etc/soar/env

# Copy binary
log_info "Copying binary to ${BINARY_PATH}..."
sudo cp target/release/${BINARY_NAME} ${BINARY_PATH}/

# Copy any necessary configuration files (if they exist)
if [ -f ".env" ]; then
    log_info "Copying .env file..."
    sudo cp .env ${DEPLOY_PATH}/
fi

# Set ownership
log_info "Setting ownership and permissions..."
sudo chown -R ${SERVICE_USER}:${SERVICE_GROUP} ${DEPLOY_PATH}
sudo chown -R ${SERVICE_USER}:${SERVICE_GROUP} ${ARCHIVE_PATH}
sudo chmod +x ${BINARY_PATH}/${BINARY_NAME}

# Install systemd services
log_info "Installing systemd services..."
sudo cp ${RUN_SERVICE_NAME}.service /etc/systemd/system/
sudo cp ${WEB_SERVICE_NAME}.service /etc/systemd/system/

# Reload systemd
log_info "Reloading systemd daemon..."
sudo systemctl daemon-reload

# Enable services
log_info "Enabling SOAR services..."
sudo systemctl enable ${RUN_SERVICE_NAME}
sudo systemctl enable ${WEB_SERVICE_NAME}

# Start services
log_info "Starting SOAR services..."
sudo systemctl start ${RUN_SERVICE_NAME}
sudo systemctl start ${WEB_SERVICE_NAME}

# Check service status
sleep 3
run_status=""
web_status=""

if sudo systemctl is-active --quiet ${RUN_SERVICE_NAME}; then
    run_status="‚úÖ RUNNING"
else
    run_status="‚ùå FAILED"
fi

if sudo systemctl is-active --quiet ${WEB_SERVICE_NAME}; then
    web_status="‚úÖ RUNNING"
else
    web_status="‚ùå FAILED"
fi

log_info "Service Status:"
log_info "  ${RUN_SERVICE_NAME}: ${run_status}"
log_info "  ${WEB_SERVICE_NAME}: ${web_status}"

# Show detailed status if any service failed
if [[ "$run_status" == *"FAILED"* ]] || [[ "$web_status" == *"FAILED"* ]]; then
    log_error "One or more services failed to start"
    
    if [[ "$run_status" == *"FAILED"* ]]; then
        log_info "Checking ${RUN_SERVICE_NAME} logs:"
        sudo journalctl -u ${RUN_SERVICE_NAME} --no-pager -l -n 10
    fi
    
    if [[ "$web_status" == *"FAILED"* ]]; then
        log_info "Checking ${WEB_SERVICE_NAME} logs:"
        sudo journalctl -u ${WEB_SERVICE_NAME} --no-pager -l -n 10
    fi
    
    exit 1
else
    log_info "‚úÖ Both services are running successfully!"
fi

log_info "üéâ Deployment completed successfully!"
log_info ""
log_info "Environment Configuration:"
log_info "  SOAR_ENV=production (services will use port 1337)"
log_info "  For development, unset SOAR_ENV to use port 1338"
log_info ""
log_info "Commands:"
log_info "  Status: sudo systemctl status ${RUN_SERVICE_NAME} ${WEB_SERVICE_NAME}"
log_info "  Logs: sudo journalctl -u ${RUN_SERVICE_NAME} -f"
log_info "  Web logs: sudo journalctl -u ${WEB_SERVICE_NAME} -f"
log_info "  Web interface: http://localhost:1337 (production)"