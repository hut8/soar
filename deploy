#!/bin/bash

set -e

echo "🚀 Starting SOAR deployment..."

# Configuration
RUN_SERVICE_NAME="soar-run"
WEB_SERVICE_NAME="soar-web"
PULL_DATA_SERVICE_NAME="soar-pull-data"
PULL_DATA_TIMER_NAME="soar-pull-data"
BINARY_PATH="/usr/local/bin"
DEPLOY_PATH="/var/lib/soar"
ARCHIVE_PATH="/var/soar/archive"
SERVICE_USER="soar"
SERVICE_GROUP="soar"
BINARY_NAME="soar"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running as root or with sudo
if [[ $EUID -eq 0 ]]; then
    log_error "This script should not be run as root. Run with sudo when needed."
    exit 1
fi

# Create environment file from .env if it doesn't exist
if [ ! -f "/etc/soar/env" ]; then
    log_info "Creating environment file from .env..."

    # Create /etc/soar directory
    sudo mkdir -p /etc/soar
    log_error "Please create /etc/soar/env file for configuration"
    exit 1
else
    log_info "Environment file /etc/soar/env exists"
fi

# Build the application first (before stopping services)
log_info "Building SOAR application..."
cargo build --release

# Check if build succeeded
if [ ! -f "target/release/${BINARY_NAME}" ]; then
    log_error "Build failed - binary not found at target/release/${BINARY_NAME}"
    log_error "Services were not stopped. No deployment changes made."
    exit 1
fi

log_info "Build successful! Now stopping services to deploy..."

# Stop services only after successful build
log_info "Stopping SOAR services..."
sudo systemctl stop ${RUN_SERVICE_NAME} 2>/dev/null || true
sudo systemctl stop ${WEB_SERVICE_NAME} 2>/dev/null || true
sudo systemctl stop ${PULL_DATA_TIMER_NAME}.timer 2>/dev/null || true

# Create service user if it doesn't exist
if ! id "${SERVICE_USER}" &>/dev/null; then
    log_info "Creating ${SERVICE_USER} system user..."
    sudo useradd -r -s /bin/false -d ${DEPLOY_PATH} ${SERVICE_USER}
else
    log_info "User ${SERVICE_USER} already exists"
fi

# Create deployment and archive directories
log_info "Creating deployment and archive directories..."
sudo mkdir -p ${DEPLOY_PATH}/logs
sudo mkdir -p ${ARCHIVE_PATH}

# Ensure /etc/soar directory exists and has correct permissions
log_info "Ensuring /etc/soar directory has correct permissions..."
sudo mkdir -p /etc/soar
sudo chown root:${SERVICE_GROUP} /etc/soar
sudo chmod 755 /etc/soar

# Verify environment file permissions
if [ -f "/etc/soar/env" ]; then
    log_info "Verifying environment file permissions..."
    sudo chown -R ${SERVICE_USER}:${SERVICE_GROUP} /etc/soar
    sudo chmod 640 /etc/soar/env
else
    log_warn "Environment file /etc/soar/env not found - skipping permission setup"
fi

# Copy binary
log_info "Copying binary to ${BINARY_PATH}..."
sudo cp target/release/${BINARY_NAME} ${BINARY_PATH}/

# Set ownership
log_info "Setting ownership and permissions..."
sudo chown -R ${SERVICE_USER}:${SERVICE_GROUP} ${DEPLOY_PATH}
sudo chown -R ${SERVICE_USER}:${SERVICE_GROUP} ${ARCHIVE_PATH}
sudo chmod +x ${BINARY_PATH}/${BINARY_NAME}

# Install systemd services
log_info "Installing systemd services..."
sudo cp ${RUN_SERVICE_NAME}.service /etc/systemd/system/
sudo cp ${WEB_SERVICE_NAME}.service /etc/systemd/system/
sudo cp ${PULL_DATA_SERVICE_NAME}.service /etc/systemd/system/
sudo cp ${PULL_DATA_TIMER_NAME}.timer /etc/systemd/system/

# Reload systemd
log_info "Reloading systemd daemon..."
sudo systemctl daemon-reload

# Enable services
log_info "Enabling SOAR services..."
sudo systemctl enable ${RUN_SERVICE_NAME}
sudo systemctl enable ${WEB_SERVICE_NAME}
sudo systemctl enable ${PULL_DATA_TIMER_NAME}.timer

# Start services
log_info "Starting SOAR services..."
sudo systemctl restart ${RUN_SERVICE_NAME}
sudo systemctl restart ${WEB_SERVICE_NAME}
sudo systemctl restart ${PULL_DATA_TIMER_NAME}.timer

# Check service status
sleep 3
run_status=""
web_status=""
timer_status=""

if sudo systemctl is-active --quiet ${RUN_SERVICE_NAME}; then
    run_status="✅ RUNNING"
else
    run_status="❌ FAILED"
fi

if sudo systemctl is-active --quiet ${WEB_SERVICE_NAME}; then
    web_status="✅ RUNNING"
else
    web_status="❌ FAILED"
fi

if sudo systemctl is-active --quiet ${PULL_DATA_TIMER_NAME}.timer; then
    timer_status="✅ ACTIVE"
else
    timer_status="❌ INACTIVE"
fi

log_info "Service Status:"
log_info "  ${RUN_SERVICE_NAME}: ${run_status}"
log_info "  ${WEB_SERVICE_NAME}: ${web_status}"
log_info "  ${PULL_DATA_TIMER_NAME}.timer: ${timer_status}"

# Show detailed status if any service failed
if [[ "$run_status" == *"FAILED"* ]] || [[ "$web_status" == *"FAILED"* ]] || [[ "$timer_status" == *"INACTIVE"* ]]; then
    log_error "One or more services failed to start"

    if [[ "$run_status" == *"FAILED"* ]]; then
        log_info "Checking ${RUN_SERVICE_NAME} logs:"
        sudo journalctl -u ${RUN_SERVICE_NAME} --no-pager -l -n 10
    fi

    if [[ "$web_status" == *"FAILED"* ]]; then
        log_info "Checking ${WEB_SERVICE_NAME} logs:"
        sudo journalctl -u ${WEB_SERVICE_NAME} --no-pager -l -n 10
    fi

    if [[ "$timer_status" == *"INACTIVE"* ]]; then
        log_info "Checking ${PULL_DATA_TIMER_NAME} timer status:"
        sudo systemctl status ${PULL_DATA_TIMER_NAME}.timer --no-pager -l
    fi

    exit 1
else
    log_info "✅ All services are running successfully!"
fi

# Track deployment in Sentry if configured
if [ -f "/etc/soar/env" ]; then
    SENTRY_DSN=$(grep "^SENTRY_DSN=" /etc/soar/env 2>/dev/null | cut -d'=' -f2- | tr -d '"' || echo "")
    if [ -n "$SENTRY_DSN" ]; then
        log_info "Tracking deployment in Sentry..."

        # Get version from git
        GIT_COMMIT=$(git rev-parse HEAD 2>/dev/null || echo "unknown")
        GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || echo "")
        VERSION=${GIT_TAG:-$GIT_COMMIT}

        # Send deployment event to Sentry
        curl -s -X POST \
            "${SENTRY_DSN%/*}/api/0/organizations/*/releases/" \
            -H "Authorization: Bearer YOUR_SENTRY_AUTH_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{
                \"version\": \"${VERSION}\",
                \"projects\": [\"soar\"],
                \"dateReleased\": \"$(date -Iseconds)\"
            }" > /dev/null 2>&1 || log_warn "Failed to track deployment in Sentry (this is non-critical)"
    fi
fi

log_info "🎉 Deployment completed successfully!"
log_info ""
log_info "Environment Configuration:"
log_info "  SOAR_ENV=production (services will use port 61225)"
log_info "  For development, unset SOAR_ENV to use port 1337"
log_info ""
log_info "Commands:"
log_info "  Status: sudo systemctl status ${RUN_SERVICE_NAME} ${WEB_SERVICE_NAME}"
log_info "  Timer Status: sudo systemctl list-timers ${PULL_DATA_TIMER_NAME}.timer"
log_info "  Logs: sudo journalctl -u ${RUN_SERVICE_NAME} -f"
log_info "  Web logs: sudo journalctl -u ${WEB_SERVICE_NAME} -f"
log_info "  Pull-data logs: sudo journalctl -u ${PULL_DATA_SERVICE_NAME} -f"
log_info "  Manual data pull: sudo systemctl start ${PULL_DATA_SERVICE_NAME}"
log_info "  Web interface: http://localhost:61225 (production)"
log_info ""
log_info "Data Import:"
log_info "  The pull-data timer runs daily at 3:00 AM"
log_info "  It automatically downloads airports, runways, and aircraft data"
