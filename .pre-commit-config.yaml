repos:
  # Frontend/SvelteKit checks (matching CI test-sveltekit job)
  - repo: local
    hooks:
      - id: web-install-deps
        name: Install web dependencies
        entry: bash -c 'cd web && npm ci'
        language: system
        files: ^web/(package\.json|package-lock\.json)$
        pass_filenames: false
        stages: [pre-commit, pre-push]

      - id: web-format
        name: Auto-fix web formatting (Prettier)
        entry: bash -c 'cd web && npm run format'
        language: system
        files: ^web/.*\.(js|ts|svelte)$
        pass_filenames: false
        stages: [pre-commit, pre-push]

      - id: web-lint
        name: Run web linter (ESLint + Prettier check)
        entry: bash -c 'cd web && npm run lint'
        language: system
        files: ^web/.*\.(js|ts|svelte)$
        pass_filenames: false
        stages: [pre-commit, pre-push]

      - id: web-type-check
        name: Run web type checking
        entry: bash -c 'cd web && npm run check'
        language: system
        files: ^web/.*\.(js|ts|svelte)$
        pass_filenames: false
        stages: [pre-commit, pre-push]

      - id: web-test
        name: Run web tests (Playwright E2E)
        entry: bash -c 'cd web && npm test'
        language: system
        files: ^web/.*\.(js|ts|svelte)$
        pass_filenames: false
        stages: [pre-push, manual]

      - id: web-build
        name: Build web project
        entry: bash -c 'cd web && npm run build'
        language: system
        files: ^web/.*\.(js|ts|svelte)$
        pass_filenames: false
        stages: [pre-push, manual]

  # Rust formatting (matching CI check)
  - repo: local
    hooks:
      - id: rust-fmt
        name: Auto-fix Rust formatting
        entry: cargo fmt
        language: system
        files: \.rs$
        pass_filenames: false
        stages: [pre-commit, pre-push]

  # Rust linting (matching CI clippy check)
  - repo: local
    hooks:
      - id: rust-clippy
        name: Run Clippy
        entry: bash -c 'export DATABASE_URL="${DATABASE_URL:-postgres://postgres:postgres@localhost:5432/soar_test}" && cargo clippy --all-targets --all-features -- -D warnings'
        language: system
        files: \.rs$
        pass_filenames: false
        stages: [pre-commit, pre-push]

  # Rust tests (matching CI test run)
  - repo: local
    hooks:
      - id: rust-test
        name: Run Rust tests
        entry: bash -c 'export DATABASE_URL="${DATABASE_URL:-postgres://postgres:postgres@localhost:5432/soar_test}" && cargo test'
        language: system
        files: \.rs$
        pass_filenames: false
        stages: [pre-push, manual]

  # Security audit (matching CI security-audit job)
  - repo: local
    hooks:
      - id: cargo-audit
        name: Run security audit
        entry: cargo audit
        language: system
        files: ^(Cargo\.toml|Cargo\.lock)$
        pass_filenames: false
        stages: [pre-commit, pre-push]

  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
        stages: [pre-commit, pre-push]
      - id: end-of-file-fixer
        stages: [pre-commit, pre-push]
      - id: check-yaml
        stages: [pre-commit, pre-push]
      - id: check-toml
        stages: [pre-commit, pre-push]
      - id: check-json
        stages: [pre-commit, pre-push]
      - id: check-merge-conflict
        stages: [pre-commit, pre-push]
      - id: check-added-large-files
        args: ["--maxkb=1000"]
        stages: [pre-commit, pre-push]

# Performance optimizations
default_stages: [pre-commit]
fail_fast: false

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ""
  autoupdate_commit_msg: "[pre-commit.ci] pre-commit autoupdate"
  autoupdate_schedule: weekly
  skip: []
  submodules: false
