#!/bin/bash

# Pre-commit hook that runs the same checks as GitHub Actions
# This prevents commits that would fail CI

set -e  # Exit on first error

echo "üîç Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if we're in the right directory
if [ ! -f "Cargo.toml" ] || [ ! -d "web" ]; then
    print_error "This doesn't appear to be the soar project root directory"
    exit 1
fi

# Check if staged files include relevant changes
STAGED_RUST_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(rs)$' || true)
STAGED_WEB_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '^web/.*\.(js|ts|svelte|json)$' || true)
STAGED_CONFIG_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '(Cargo\.(toml|lock)|package(-lock)?\.json)$' || true)

# If no relevant files are staged, skip checks
if [ -z "$STAGED_RUST_FILES" ] && [ -z "$STAGED_WEB_FILES" ] && [ -z "$STAGED_CONFIG_FILES" ]; then
    print_success "No relevant files staged, skipping checks"
    exit 0
fi

# Check for web changes
if [ -n "$STAGED_WEB_FILES" ] || [ -n "$STAGED_CONFIG_FILES" ]; then
    print_status "Running SvelteKit checks..."

    cd web

    # Check if npm dependencies are installed
    if [ ! -d "node_modules" ]; then
        print_status "Installing npm dependencies..."
        npm ci
    fi

    # Run npm checks
    print_status "Running npm lint..."
    if ! npm run lint; then
        print_error "npm lint failed"
        exit 1
    fi
    print_success "npm lint passed"

    print_status "Running npm type check..."
    if ! npm run check; then
        print_error "npm check failed"
        exit 1
    fi
    print_success "npm check passed"

    print_status "Running npm tests..."
    if ! npm test; then
        print_error "npm test failed"
        exit 1
    fi
    print_success "npm tests passed"

    print_status "Testing npm build..."
    if ! npm run build; then
        print_error "npm build failed"
        exit 1
    fi
    print_success "npm build passed"

    cd ..
fi

# Check for Rust changes
if [ -n "$STAGED_RUST_FILES" ] || [ -n "$STAGED_CONFIG_FILES" ]; then
    print_status "Running Rust checks..."

    # Check Rust formatting
    print_status "Checking Rust formatting..."
    if ! cargo fmt --check; then
        print_error "Rust formatting check failed. Run 'cargo fmt' to fix."
        exit 1
    fi
    print_success "Rust formatting check passed"

    # Run Clippy
    print_status "Running Clippy..."
    if ! cargo clippy --all-targets --all-features -- -D warnings; then
        print_error "Clippy failed"
        exit 1
    fi
    print_success "Clippy passed"

    print_status "Running Rust tests..."
    if ! cargo test --verbose; then
        print_error "Rust tests failed"
        exit 1
    fi
    print_success "Rust tests passed"
fi

print_success "All pre-commit checks passed! ‚ú®"
echo ""
echo "Committing changes..."
